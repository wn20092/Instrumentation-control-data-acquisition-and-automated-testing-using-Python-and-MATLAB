# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget
import Caller
import numpy as np
import pyqtgraph as pg


class Ui_MainWindow(object):

    maxFreq = 5
    minFreq = 3
    voltage = 5
    numberOfDataPoints = 10
    # True for on, False for off
    noiseReduce = True
    
    freqs = []
    result = []
    phaseOut = []
    result_dB = []


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(966, 716)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_5.setObjectName("gridLayout_5")
        
        # widget for transferDB plot
        self.displayTransferDB()
        
        # widget for transfer function plot
        self.displayTransferFunction()
        
        # widget for phase plot
        self.diaplayPhase()
        
        self.MaximumFrequencyEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.MaximumFrequencyEdit.setMinimumSize(QtCore.QSize(176, 25))
        self.MaximumFrequencyEdit.setAutoFillBackground(True)
        self.MaximumFrequencyEdit.setInputMask("")
        self.MaximumFrequencyEdit.setObjectName("MaximumFrequencyEdit")
        self.gridLayout_4.addWidget(self.MaximumFrequencyEdit, 0, 2, 1, 1)
        self.Noisereduce = QtWidgets.QLabel(self.centralwidget)
        self.Noisereduce.setMinimumSize(QtCore.QSize(91, 19))
        self.Noisereduce.setObjectName("Noisereduce")
        self.gridLayout_4.addWidget(self.Noisereduce, 4, 0, 1, 1)

        # MaximumFrequency
        self.MaximumFrequency = QtWidgets.QLabel(self.centralwidget)
        self.MaximumFrequency.setEnabled(True)
        self.MaximumFrequency.setMinimumSize(QtCore.QSize(146, 19))
        self.MaximumFrequency.setObjectName("MaximumFrequency")
        self.MaximumFrequencyEdit.textEdited.connect(self.maximumFrequencyEdited)
        self.gridLayout_4.addWidget(self.MaximumFrequency, 0, 0, 1, 2)

        # voltage
        self.VoltageEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.VoltageEdit.setMinimumSize(QtCore.QSize(176, 25))
        self.VoltageEdit.setObjectName("VoltageEdit")
        self.gridLayout_4.addWidget(self.VoltageEdit, 3, 2, 1, 1)
        self.Voltage = QtWidgets.QLabel(self.centralwidget)
        self.Voltage.setMinimumSize(QtCore.QSize(53, 19))
        self.Voltage.setObjectName("Voltage")
        self.VoltageEdit.textEdited.connect(self.voltageEdited)

        # number of data points edit
        self.gridLayout_4.addWidget(self.Voltage, 3, 0, 1, 1)
        self.NumberOfDataPointsEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.NumberOfDataPointsEdit.setMinimumSize(QtCore.QSize(176, 25))
        self.NumberOfDataPointsEdit.setObjectName("NumberOfDataPointsEdit")
        self.gridLayout_4.addWidget(self.NumberOfDataPointsEdit, 2, 2, 1, 1)
        self.NumberOfDataPoints = QtWidgets.QLabel(self.centralwidget)
        self.NumberOfDataPoints.setMinimumSize(QtCore.QSize(161, 19))
        self.NumberOfDataPoints.setObjectName("NumberOfDataPoints")
        self.NumberOfDataPointsEdit.textEdited.connect(self.numberOfDataPointsEdited)
        self.gridLayout_4.addWidget(self.NumberOfDataPoints, 2, 0, 1, 2)

        # noise reduce
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setMinimumSize(QtCore.QSize(63, 25))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_4.addWidget(self.comboBox, 4, 2, 1, 1)
        self.comboBox.currentIndexChanged.connect(self.noiseReducedEdited)

        # MinimumFrequency
        self.MinimumFrequency = QtWidgets.QLabel(self.centralwidget)
        self.MinimumFrequency.setMinimumSize(QtCore.QSize(143, 19))
        self.MinimumFrequency.setObjectName("MinimumFrequency")
        self.gridLayout_4.addWidget(self.MinimumFrequency, 1, 0, 1, 2)
        self.MinimumFrequencyEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.MinimumFrequencyEdit.setMinimumSize(QtCore.QSize(176, 25))
        self.MinimumFrequencyEdit.setObjectName("MinimumFrequencyEdit")
        self.MinimumFrequencyEdit.textEdited.connect(self.minFrequencyEdited)
        self.gridLayout_4.addWidget(self.MinimumFrequencyEdit, 1, 2, 1, 1)

        # Pushbutton
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_4.addWidget(self.pushButton, 5, 1, 1, 2, QtCore.Qt.AlignHCenter)
        self.gridLayout_5.addLayout(self.gridLayout_4, 0, 0, 1, 3)
        self.pushButton.clicked.connect(self.aquireAction)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 966, 31))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.MaximumFrequencyEdit.setText(_translate("MainWindow", "100000"))

        self.Noisereduce.setText(_translate("MainWindow", "Noise reduce"))
        self.MaximumFrequency.setText(_translate("MainWindow", "Maximum Frequency"))
        self.VoltageEdit.setText(_translate("MainWindow", "5"))
        self.Voltage.setText(_translate("MainWindow", "Voltage"))
        self.NumberOfDataPointsEdit.setText(_translate("MainWindow", "10"))
        self.NumberOfDataPoints.setText(_translate("MainWindow", "Number of Data Points"))
        self.comboBox.setItemText(0, _translate("MainWindow", "ON"))
        self.comboBox.setItemText(1, _translate("MainWindow", "OFF"))
        self.MinimumFrequency.setText(_translate("MainWindow", "Minimum Frequency"))
        self.MinimumFrequencyEdit.setText(_translate("MainWindow", "1000"))
        self.pushButton.setText(_translate("MainWindow", "Acquire"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        
    def displayTransferDB(self):
        self.transferfunctiondB = PlotWidget(self.centralwidget)
        self.transferfunctiondB.setAutoFillBackground(False)
        self.transferfunctiondB.setObjectName("transferfunctiondB")
        self.gridLayout_5.addWidget(self.transferfunctiondB, 1, 2, 1, 1)
        self.setDB()

    def setDB(self):
        self.transferfunctiondB.setBackground('w')
        self.transferfunctiondB.setTitle('Magnitude of the transfer function in dB')
        self.transferfunctiondB.setLabel('left', 'dB')
        self.transferfunctiondB.setLabel('bottom', 'Frequency (Hz)')
        self.transferfunctiondB.setLogMode(x=True, y=False)
        self.transferfunctiondB.showGrid(x=True, y=True)

    def displayTransferFunction(self):
        self.transferfunction = PlotWidget(self.centralwidget)
        self.transferfunction.setObjectName("transferfunction")
        self.gridLayout_5.addWidget(self.transferfunction, 1, 0, 1, 1)
        self.setTransferFunction()

    def setTransferFunction(self):
        self.transferfunction.setBackground('w')
        self.transferfunction.setTitle('Magnitude of the transfer function')
        self.transferfunction.setLabel('bottom', 'Frequency (Hz)')
        self.transferfunction.setLogMode(x=True, y=False)
        self.transferfunction.showGrid(x=True, y=True)
        
    def diaplayPhase(self):
        self.phase = PlotWidget(self.centralwidget)
        self.phase.setObjectName("phase")
        self.gridLayout_5.addWidget(self.phase, 1, 1, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.setPhase()

    def setPhase(self):
        self.phase.setBackground('w')
        self.phase.setTitle('Phase of the transfer function in degrees')
        self.phase.setLabel('left', 'deg')
        self.phase.setLabel('bottom', 'Frequency (Hz)')
        self.phase.setLogMode(x=True, y=False)
        self.phase.showGrid(x=True, y=True)

    def maximumFrequencyEdited(self):
        print(self.MaximumFrequencyEdit.text())
        self.maxFreq = np.log10(int(self.MaximumFrequencyEdit.text()))
    def minFrequencyEdited(self):
        print(self.MinimumFrequencyEdit.text())
        self.minFreq = np.log10(int(self.MinimumFrequencyEdit.text()))

    def voltageEdited(self):
        print(self.VoltageEdit.text())
        self.voltage = int(self.VoltageEdit.text())

    def numberOfDataPointsEdited(self):
        print(self.NumberOfDataPointsEdit.text())
        self.numberOfDataPoints = int(self.NumberOfDataPointsEdit.text())

    def noiseReducedEdited(self):
        if self.comboBox.currentIndex() == 0:
            self.noiseReduce = True
        else:
            self.noiseReduce = False

    def aquireAction(self):
        # construct connection object with oscilloscope
        oscilloscope = Caller.Caller()
        # feeds parameters
        oscilloscope.setParam(self.maxFreq, self.minFreq, self.numberOfDataPoints, self.voltage, self.noiseReduce)

        # get readings from oscilloscope
        self.freqs, self.phaseOut, self.result, self.result_dB = oscilloscope.getResultFromRohde()
        self.updatePlots()
        # oscilloscope.returnPlot()

    def updatePlots(self):
        # plotting
        # self.transferfunctiondB.clear()
        pen = pg.mkPen(color=(255, 0, 0),width=2)
        print(self.result_dB)
        self.transferfunctiondB.plot(self.freqs, self.result_dB,pen=pen)
        self.setDB()
        #
        # self.transferfunction.clear()
        self.transferfunction.plot(self.freqs, self.result,pen=pen)
        self.setTransferFunction()

        # self.phase.clear()
        
        self.phase.plot(self.freqs, self.phaseOut,pen=pen)
        self.setPhase()
        